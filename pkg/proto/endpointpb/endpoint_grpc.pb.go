//
//Copyright 2022 Nokia.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/proto/endpointpb/endpoint.proto

//import "google/protobuf/any.proto";

package endpointpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeEndpoint_EndpointGet_FullMethodName    = "/endpoint.NodeEndpoint/EndpointGet"
	NodeEndpoint_EndpointCreate_FullMethodName = "/endpoint.NodeEndpoint/EndpointCreate"
	NodeEndpoint_EndpointDelete_FullMethodName = "/endpoint.NodeEndpoint/EndpointDelete"
	NodeEndpoint_EndpointWatch_FullMethodName  = "/endpoint.NodeEndpoint/EndpointWatch"
)

// NodeEndpointClient is the client API for NodeEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeEndpointClient interface {
	EndpointGet(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error)
	EndpointCreate(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	EndpointDelete(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	EndpointWatch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (NodeEndpoint_EndpointWatchClient, error)
}

type nodeEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeEndpointClient(cc grpc.ClientConnInterface) NodeEndpointClient {
	return &nodeEndpointClient{cc}
}

func (c *nodeEndpointClient) EndpointGet(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error) {
	out := new(EndpointResponse)
	err := c.cc.Invoke(ctx, NodeEndpoint_EndpointGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeEndpointClient) EndpointCreate(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, NodeEndpoint_EndpointCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeEndpointClient) EndpointDelete(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, NodeEndpoint_EndpointDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeEndpointClient) EndpointWatch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (NodeEndpoint_EndpointWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeEndpoint_ServiceDesc.Streams[0], NodeEndpoint_EndpointWatch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeEndpointEndpointWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeEndpoint_EndpointWatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type nodeEndpointEndpointWatchClient struct {
	grpc.ClientStream
}

func (x *nodeEndpointEndpointWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeEndpointServer is the server API for NodeEndpoint service.
// All implementations must embed UnimplementedNodeEndpointServer
// for forward compatibility
type NodeEndpointServer interface {
	EndpointGet(context.Context, *EndpointRequest) (*EndpointResponse, error)
	EndpointCreate(context.Context, *EndpointRequest) (*EmptyResponse, error)
	EndpointDelete(context.Context, *EndpointRequest) (*EmptyResponse, error)
	EndpointWatch(*WatchRequest, NodeEndpoint_EndpointWatchServer) error
	mustEmbedUnimplementedNodeEndpointServer()
}

// UnimplementedNodeEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedNodeEndpointServer struct {
}

func (UnimplementedNodeEndpointServer) EndpointGet(context.Context, *EndpointRequest) (*EndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointGet not implemented")
}
func (UnimplementedNodeEndpointServer) EndpointCreate(context.Context, *EndpointRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointCreate not implemented")
}
func (UnimplementedNodeEndpointServer) EndpointDelete(context.Context, *EndpointRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointDelete not implemented")
}
func (UnimplementedNodeEndpointServer) EndpointWatch(*WatchRequest, NodeEndpoint_EndpointWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method EndpointWatch not implemented")
}
func (UnimplementedNodeEndpointServer) mustEmbedUnimplementedNodeEndpointServer() {}

// UnsafeNodeEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeEndpointServer will
// result in compilation errors.
type UnsafeNodeEndpointServer interface {
	mustEmbedUnimplementedNodeEndpointServer()
}

func RegisterNodeEndpointServer(s grpc.ServiceRegistrar, srv NodeEndpointServer) {
	s.RegisterService(&NodeEndpoint_ServiceDesc, srv)
}

func _NodeEndpoint_EndpointGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeEndpointServer).EndpointGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeEndpoint_EndpointGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeEndpointServer).EndpointGet(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeEndpoint_EndpointCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeEndpointServer).EndpointCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeEndpoint_EndpointCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeEndpointServer).EndpointCreate(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeEndpoint_EndpointDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeEndpointServer).EndpointDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeEndpoint_EndpointDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeEndpointServer).EndpointDelete(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeEndpoint_EndpointWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeEndpointServer).EndpointWatch(m, &nodeEndpointEndpointWatchServer{stream})
}

type NodeEndpoint_EndpointWatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type nodeEndpointEndpointWatchServer struct {
	grpc.ServerStream
}

func (x *nodeEndpointEndpointWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NodeEndpoint_ServiceDesc is the grpc.ServiceDesc for NodeEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoint.NodeEndpoint",
	HandlerType: (*NodeEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndpointGet",
			Handler:    _NodeEndpoint_EndpointGet_Handler,
		},
		{
			MethodName: "EndpointCreate",
			Handler:    _NodeEndpoint_EndpointCreate_Handler,
		},
		{
			MethodName: "EndpointDelete",
			Handler:    _NodeEndpoint_EndpointDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EndpointWatch",
			Handler:       _NodeEndpoint_EndpointWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/endpointpb/endpoint.proto",
}
