/*
Copyright 2022 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

//import "google/protobuf/any.proto";

package wire;
option go_package = "github.com/henderiw-nephio/wire-connector/pkg/proto/wirepb";

service Wire {
  rpc WireGet (WireRequest) returns (WireResponse) {}
  rpc WireCreate (WireRequest) returns (EmptyResponse) {}
  rpc WireDelete (WireRequest) returns (EmptyResponse) {}
  rpc WireWatch (WatchRequest) returns (stream WatchResponse) {}
}

message WireKey {
  string namespace = 1;
  string name = 2;
}

message WireRequest {
  WireKey wireKey = 1;
  repeated Endpoint endpoints = 2;
  uint32 mtu = 3;
  uint32 vpnID = 4;
}

message Endpoint {
  string topology = 1; // topology is reflected as a namespace
  string nodeName = 2; // this is the podName
  string ifName = 3; 
  bool local = 4;
  string hostNodeName = 5;
  string hostIP = 6;
  string serviceEndpoint = 7;
  string clusterName = 8;
  bool localAction = 9;
}

message WireResponse {
  WireKey wireKey = 1;
  repeated EndpointStatus endpointsStatus = 2;
  StatusCode statusCode = 3;
  string reason = 4;
}

message EndpointStatus {
  StatusCode statusCode = 1;
  string reason = 2;
}

message EmptyResponse{
  StatusCode statusCode = 1;
  string reason = 2;
}

message WatchRequest {
  string namespace = 1;
  string name = 2;
}

message WatchResponse {
  string namespace = 1;
  string name = 2;
  StatusCode statusCode = 3;
  string reason = 4;
}

enum StatusCode {
  OK = 0; // the status is OK
  NOK = 1; // the status is NOK
  NotFound = 2; // the object does not exists
}